generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://schoolAttendance:Sensarsoft%40123@[2a02:4780:12:f6a7::1]:3306/ramchin_smart_school"
}

//url      = "mysql://admin:Ramchin123@school-attendance.cr2ue6u44sny.eu-north-1.rds.amazonaws.com:3306/school_attendance"

enum Gender {
  M
  F
  O
}

enum StudentFeesStatus {
  PENDING
  PARTIALLY_PAID
  PAID
}

enum DayOfWeek {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}
model FeeStructure {
  id          Int       @id @default(autoincrement())
  school_id   Int
  class_id    Int
  title String?
  descriptions Json?
  amounts     Json?
  total_amount      Float?
  start_date  DateTime? @default(now())
  end_date    DateTime?
  created_by  String
  created_at  DateTime  @default(now())
  updated_by  String
  updated_at  DateTime  @updatedAt
  status      String    @default("inactive") // "active" or "inactive"

  class  Classes @relation(fields: [class_id], references: [id])
  school School  @relation(fields: [school_id], references: [id])

  @@unique([school_id, class_id, title], name: "unique_fee_per_class")
}

model StudentFees {
  id                   Int               @id @default(autoincrement())
  school_id            Int
  class_id             Int
  username             String
  total_amount         Float
  paid_amount          Float
  payment_ids          Json?
  fee_structure_snapshot Json?
  status               StudentFeesStatus @default(PENDING)
  last_payment_date    DateTime?
  remarks              String?

  user   Attendance_user @relation(fields: [username, school_id], references: [username, school_id])
  class  Classes         @relation(fields: [class_id], references: [id])
  school School          @relation(fields: [school_id], references: [id])
  payments FeePayments[]

  // @@unique([school_id, class_id, username], name: "unique_fee_per_student")
}

model FeePayments {
  id             Int          @id @default(autoincrement())
  student_fee_id Int
  amount         Float
  payment_date   DateTime     @default(now())
  method         String?
  transaction_id String?
  status         String       @default("pending")

  studentFee StudentFees @relation(fields: [student_fee_id], references: [id])
}

// model FeePayments {
//   id             Int      @id @default(autoincrement())
//   student_fee_id Int
//   amount         Float
//   payment_date   DateTime
//   method         String?
//   transaction_id String?
// }

// model StudentFees {
//   id           Int               @id @default(autoincrement())
//   school_id    Int
//   class_id     Int
//   username     String
//   total_amount Float
//   paid_amount  Float
//   paid_fee_ids Json?
//   status       StudentFeesStatus

//   user   Attendance_user @relation(fields: [username, school_id], references: [username, school_id])
//   class  Classes         @relation(fields: [class_id], references: [id])
//   school School          @relation(fields: [school_id], references: [id])
//   // @@unique([school_id, class_id, username], name: "unique_exam_per_student")
// }

// model FeeStructure {
//   id          Int      @id @default(autoincrement())
//   school_id   Int
//   class_id    Int
//   description String
//   amount      Float
//   end_date    DateTime
//   created_by  String
//   created_at  DateTime @default(now())
//   updated_by  String
//   updated_at  DateTime @updatedAt
//   status      String?  @default("inactive")

//   class  Classes @relation(fields: [class_id], references: [id])
//   school School  @relation(fields: [school_id], references: [id])

//   @@unique([school_id, class_id, description], name: "unique_fee_per_class")
// }

model ExamMarks {
  id            Int      @id @default(autoincrement())
  school_id     Int
  class_id      Int
  username      String
  title         String
  min_max_marks Json
  marks         Json
  subjects      Json
  subject_rank  Json
  rank          String   @default("-")
  created_by    String
  created_at    DateTime @default(now())
  updated_by    String
  updated_at    DateTime @updatedAt
  status        String?  @default("inactive")
  date          Json
  session       Json

  class  Classes @relation(fields: [class_id], references: [id])
  school School  @relation(fields: [school_id], references: [id])

  @@unique([school_id, class_id, username, title], name: "unique_exam_per_student")
}

model Attendance_user {
  id        Int     @id @default(autoincrement())
  username  String
  password  String
  role      String
  school_id Int
  fcmToken  String?

  school      School            @relation(fields: [school_id], references: [id])
  staff       Staff?            @relation("UserToStaff1")
  students    Student[]
  admin       Admin?
  messages    RealTimeMessage[]
  studentFees StudentFees[]

  @@unique([username, school_id]) // usernames unique per school
  @@index([school_id])
}

model RealTimeMessage {
  id        Int      @id @default(autoincrement())
  text      String
  role      String
  school_id Int
  classId   Int?
  createdAt DateTime @default(now())

  senderId   Int
  sender     Attendance_user @relation(fields: [senderId], references: [id])
  senderName String

  school School @relation(fields: [school_id], references: [id])

  @@index([school_id])
  @@index([senderId])
}

model AppPayment {
  id              Int         @id @default(autoincrement())
  schoolId        Int
  school          School      @relation(fields: [schoolId], references: [id])
  studentsCount   Int         // Students at time of payment
  paymentPlan     AppPaymentPlan
  amount          Float
  paidAt          DateTime    @default(now())
  periodStart     DateTime    // Billing period start
  periodEnd       DateTime    // Billing period end
  transactionId   String?     // Payment gateway transaction ID
  status          AppPaymentStatus @default(PENDING)
  createdAt       DateTime    @default(now())
}

enum AppPaymentPlan {
  MONTHLY
  YEARLY
}

enum AppPaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
model School {
  id      Int    @id @default(autoincrement())
  name    String @unique
  address String
  photo   Bytes?
  createdAt      DateTime? @default(now())
  dueDate      DateTime? 
  users              Attendance_user[]
  staff              Staff[]
  classes            Classes[]
  holidays           Holidays[]
  students           Student[]
  feedbacks          Feedback[]
  classTimetables    ClassTimetable[]
  staffAttendances   StaffAttendance[]
  studentAttendances StudentAttendance[]
  admins             Admin[]
  Messages           Messages[]
  Tickets            Tickets[]
  blockedSchool      BlockedSchool[]
  messages           RealTimeMessage[]
  examMarks          ExamMarks[]
  feeStructure       FeeStructure[]
  studentFees        StudentFees[]
  appPayment         AppPayment[]
}

model BlockedSchool {
  id        Int    @id @default(autoincrement())
  school_id Int    @unique
  reason    String
  school    School @relation(fields: [school_id], references: [id])

  @@index([school_id])
}

model Classes {
  id        Int    @id @default(autoincrement())
  class     String @map("class")
  section   String
  school_id Int

  school            School              @relation(fields: [school_id], references: [id])
  holidays          Holidays[]          @relation("HolidayClasses")
  staff             Staff[]             @relation("class_ids")
  students          Student[]
  studentAttendance StudentAttendance[]
  classTimetables   ClassTimetable[]
  feedbacks         Feedback[]
  examMarks         ExamMarks[]
  feeStructure      FeeStructure[]
  studentFees       StudentFees[]

  @@index([school_id])
}

model Holidays {
  id        Int      @id @default(autoincrement())
  date      DateTime
  reason    String
  school_id Int?
  class_ids Json
  fn        String?  @db.Char(1)
  an        String   @db.Char(1)

  school  School?   @relation(fields: [school_id], references: [id])
  classes Classes[] @relation("HolidayClasses")

  @@index([school_id])
}

model Student {
  id        Int     @id @default(autoincrement())
  username  String
  name      String?
  gender    Gender?
  email     String
  mobile    String
  class_id  Int
  school_id Int

  photo       Bytes?
  father_name String    @default("null")
  community   String    @default("null")
  DOB         DateTime? @default(now())
  route       String    @default("null")

  class      Classes             @relation(fields: [class_id], references: [id])
  school     School              @relation(fields: [school_id], references: [id])
  user       Attendance_user     @relation(fields: [username, school_id], references: [username, school_id])
  attendance StudentAttendance[]

  @@unique([username, school_id]) // ✅ student username unique within school
  @@index([school_id])
  @@index([class_id])
}

model Staff {
  id          Int     @id @default(autoincrement())
  username    String
  designation String
  name        String?
  email       String  @default("null")
  gender      Gender?
  mobile      String
  school_id   Int
  class_ids   Json    @default("null")
  photo       Bytes?  @default("null")
  faculty     String  @default("null")

  school      School            @relation(fields: [school_id], references: [id])
  user        Attendance_user   @relation("UserToStaff1", fields: [username, school_id], references: [username, school_id], onDelete: Restrict, onUpdate: Cascade)
  attendances StaffAttendance[]
  classes     Classes[]         @relation("class_ids")

  @@unique([username, school_id]) // ✅ username unique within school
  @@unique([mobile, school_id]) // ✅ mobile unique within school
  @@index([school_id])
}

model Admin {
  id          Int     @id @default(autoincrement())
  name        String?
  designation String
  gender      String  @default("null")
  mobile      String
  email       String  @default("example@gmail.com")
  photo       Bytes?
  username    String
  school_id   Int

  school School          @relation(fields: [school_id], references: [id])
  user   Attendance_user @relation(fields: [username, school_id], references: [username, school_id])

  @@unique([username, school_id]) // ✅ username unique within school
  @@unique([mobile, school_id]) // ✅ mobile unique within school
  @@index([school_id])
}

model StaffAttendance {
  username  String
  school_id Int
  date      DateTime
  fn_status String   @default("null")
  an_status String   @default("null")

  school School @relation(fields: [school_id], references: [id])
  staff  Staff  @relation(fields: [username, school_id], references: [username, school_id])

  @@unique([username, school_id, date], name: "username_school_date_staff")
  @@index([school_id])
}

model StudentAttendance {
  username  String
  school_id Int
  class_id  Int
  date      DateTime
  fn_status String   @default("null")
  an_status String   @default("null")

  class   Classes @relation(fields: [class_id], references: [id])
  student Student @relation(fields: [username, school_id], references: [username, school_id])
  school  School  @relation(fields: [school_id], references: [id])

  @@unique([username, school_id, date], name: "username_school_date") // ✅ unique per student per day per school
  @@index([school_id])
  @@index([class_id])
}

model ClassTimetable {
  id           Int       @id @default(autoincrement())
  schoolId     Int?
  classesId    Int?
  dayOfWeek    DayOfWeek
  periodNumber Int
  subject      String

  School  School?  @relation(fields: [schoolId], references: [id])
  Classes Classes? @relation(fields: [classesId], references: [id])

  @@unique([schoolId, classesId, dayOfWeek, periodNumber], name: "schoolId_classesId_dayOfWeek_periodNumber")
  @@index([schoolId])
  @@index([classesId])
}

model Feedback {
  id         Int      @id @default(autoincrement())
  username   String
  name       String
  email      String
  feedback   String
  school_id  Int
  class_id   Int
  created_at DateTime @default(now())

  school School  @relation(fields: [school_id], references: [id])
  class  Classes @relation(fields: [class_id], references: [id])
}

//add parthi
model Tickets {
  id          Int      @id @default(autoincrement())
  username    String
  name        String
  email       String
  tickets     String
  school_id   Int
  status      String   @default("Pending")
  created_at  DateTime @default(now())
  modified_at DateTime @default(now())

  school School @relation(fields: [school_id], references: [id])
}

model Messages {
  id        Int     @id @default(autoincrement())
  messages  String  @db.VarChar(200)
  date      String? @db.VarChar(45)
  school_id Int

  school School @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([school_id])
}

model LeaveRequest {
  id         Int      @id @default(autoincrement())
  username   String // The user requesting leave
  role       Role     @default(student) // Role of requester (optional, helpful for logic)
  school_id  Int
  class_id   Int
  from_date  DateTime // Leave start date
  to_date    DateTime // Leave end date
  reason     String? // Optional leave reason
  status     String   @default("pending") // "pending", "approved", "rejected"
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([username])
  @@index([school_id, class_id])
}

model Homework {
  id            Int      @id @default(autoincrement())
  school_id     Int
  class_id      Int
  title         String
  subject       String
  description   String
  assigned_date DateTime
  due_date      DateTime
  assigned_by   String
  attachments   String?

  @@index([school_id, class_id])
}

enum Role {
  admin
  staff
  student
}
